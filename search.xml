<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>next 主题基本设置</title>
    <url>/2023/09/03/next%E4%B8%BB%E9%A2%98%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>为博客更换 next 主题，并做基础设置，使其能用。</p>
<span id="more"></span>

<ol>
<li><h2 id="更换next主题"><a href="#更换next主题" class="headerlink" title="更换next主题"></a>更换next主题</h2><ol>
<li><p>从<a href="https://github.com/hexojs/hexo/wiki/Themes#n">hexo主题库</a>中找一款中意的下载到 blog-dir&#x2F;themes 文件夹中</p>
</li>
<li><p>设置 hexo 配置文件 <code>_config.yml</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Extensions</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Plugins: https://hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Themes: https://hexo.io/themes/</span></span></span><br><span class="line">theme: next  # 这里的主题名字要和themes文件夹中下载的主题文件夹名字一致</span><br></pre></td></tr></table></figure>

<p>将这里改为你下载的主题，顺便选 next 的原因是维护比较好，界面简约</p>
</li>
<li><p>然后 <code>hexo g</code> <code>hexo d</code> 就完成主题更换。</p>
</li>
</ol>
</li>
<li><h2 id="next-主题优化"><a href="#next-主题优化" class="headerlink" title="next 主题优化"></a>next 主题优化</h2><p>现在有两个关键配置文件，</p>
<ul>
<li>一个是 <code>site-dir\themes\next</code> 文件夹下的 <code>_config.yml</code>，</li>
<li>另一个是<code>site-dir</code> 文件夹下的 <code>_config.yml</code>，</li>
<li>两个文件同名，但是前者是关于 next 主题的配置，后者是关于 hexo 博客的配置。</li>
</ul>
<ol>
<li><h3 id="站点基本配置信息"><a href="#站点基本配置信息" class="headerlink" title="站点基本配置信息"></a>站点基本配置信息</h3><p>更改 hexo 配置文件为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Site</span></span><br><span class="line">title: Focus2flow</span><br><span class="line">subtitle: &#x27;less is more&#x27;</span><br><span class="line">description: &#x27;技术，人生，思考，自我&#x27;</span><br><span class="line">keywords:</span><br><span class="line">author: sky</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: &#x27;&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="更改-next-的-scheme"><a href="#更改-next-的-scheme" class="headerlink" title="更改 next 的 scheme"></a>更改 next 的 scheme</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Schemes</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">scheme: Muse</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">scheme: Mist</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">scheme: Pisces</span></span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="菜单设置"><a href="#菜单设置" class="headerlink" title="菜单设置"></a>菜单设置</h3><p>添加标签，分类关于三个页面。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先在 next 配置文件中打开这三个开关</span></span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 hexo 命令在 <span class="built_in">source</span> 目录下创建三个文件夹</span></span><br><span class="line">hexo n page about</span><br><span class="line">hexo n page tags</span><br><span class="line">hexo n page categories</span><br></pre></td></tr></table></figure>

<p>此时在四个文件夹中自动生成了对应页面的 md 文档，hexo s 运行博客也可以在首页访问到对应页面，问题是这四个功能页面跟普通的post中的内容页面是有区别的，具体来讲：</p>
<ul>
<li>about 页暂不清楚</li>
<li>tags 页要根据 post 中博文在文件头部设置的标签对文章进行分类</li>
<li>categories 页要根据类别进行分类，类似于文件夹</li>
<li>archives 页对本博客所有文章按时间轴列出</li>
</ul>
<p>因此需要对这这些功能文件在文件头部用 type 字段进行说明，next 识别到类型说明才能启动对应的算法从 post 里的博文里统计并呈现对应信息。</p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230903215225417.png" alt="image-20230903215225417"></p>
<p>那么写博文时候怎样设置 tags catagories 呢？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置标签</span></span><br><span class="line">title: 标签测试文章标题</span><br><span class="line">tags: </span><br><span class="line">  - 标签1</span><br><span class="line">  - 标签2</span><br><span class="line">  ...</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置分类</span></span><br><span class="line">title: 分类测试文章标题</span><br><span class="line">categories: 分类名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">另一种设置方法</span></span><br><span class="line">tags: [&quot;tag1&quot;,&quot;tag2&quot;]</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="添加阅读全文按钮"><a href="#添加阅读全文按钮" class="headerlink" title="添加阅读全文按钮"></a>添加阅读全文按钮</h3><p>在你认为合适的地方添加：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h3><ol>
<li><p>安装 <a href="https://links.jianshu.com/go?to=https://github.com/flashlab/hexo-generator-search">hexo-generator-searchdb</a> 插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-generator-searchdb --save</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打开站点配置文件找到 <code>Extensions</code> 在下面添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索</span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li>
</ol>
<p>3、打开主题配置文件找到<code>Local search</code>，将<code>enable</code>设置为<code>true</code></p>
</li>
</ol>
</li>
</ol>
<p>至此就是一个打开可以用起来的博客了，那么梳理一下写新文章的合理步骤：</p>
<ol>
<li><code>hexo n name </code> 在 post 中生成一个带文件头的 md 文档</li>
<li>typora 接管文档，写博客</li>
<li>写完之后 hexo 生成，部署</li>
</ol>
<p><strong>参考文章：</strong></p>
<p><a href="https://hexo.io/">hexo 官方文档</a></p>
<p><a href="https://theme-next.js.org/">next 官方文档</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI3OTUzMzcwNw==&mid=2247488750&idx=1&sn=bddb76b8e85d04b303b3d10024b8a56b&chksm=eb47150adc309c1cfe5f847acaf6a3eb7de3efb3c7f2a87e708a686a740aa364c33c80ea3000&token=1693393167&lang=zh_CN#rd">博客的意义</a></p>
<p><a href="https://www.jianshu.com/p/3a05351a37dc">基础优化</a></p>
<p><strong>未来优化方向：</strong></p>
<p><a href="https://www.lovebykin.com/4288776826/">鉴于分类页太丑</a></p>
<p><a href="https://blog.juanertu.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/">一个系列博客有机会再优化</a></p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>UESTC奖学金体系</title>
    <url>/2023/09/04/UESTC%E5%A5%96%E5%AD%A6%E9%87%91%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<p>学习一下成电的奖学金体系</p>
<span id="more"></span>

<ul>
<li><h1 id="奖学金体系"><a href="#奖学金体系" class="headerlink" title="奖学金体系"></a>奖学金体系</h1><ul>
<li>学业<ul>
<li>金额：10000&#x2F;8000&#x2F;4000</li>
<li>评定时间：9月中上旬</li>
<li>申请制：需要提交佐证材料</li>
</ul>
</li>
<li>国家<ul>
<li>金额：硕2万，博3万</li>
<li>评定时间：9月中下旬，学业奖学金之后</li>
<li>申请制：大约也是按照学业奖学金的那套细则</li>
</ul>
</li>
<li>专项<ul>
<li>小米<ul>
<li>金额：2万，10个名额</li>
<li>时间：1月上旬</li>
<li>可与国奖兼得</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><h1 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h1><ul>
<li>国奖与专项不可兼得，专项有特殊说明的除外</li>
</ul>
</li>
<li><h1 id="评定办法"><a href="#评定办法" class="headerlink" title="评定办法"></a>评定办法</h1><ul>
<li>研二：综合素质得分&#x3D;学业成绩得分+科研成果得分+素质发展得分+导师评价得分</li>
<li>研三：综合素质得分&#x3D;科研成果得分+素质发展得分+导师评价得分</li>
</ul>
</li>
<li><h1 id="综合素质得分细则"><a href="#综合素质得分细则" class="headerlink" title="综合素质得分细则"></a>综合素质得分细则</h1><ul>
<li><h2 id="科研成果"><a href="#科研成果" class="headerlink" title="科研成果"></a>科研成果</h2><ul>
<li><h3 id="学术论文"><a href="#学术论文" class="headerlink" title="学术论文"></a>学术论文</h3><p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230904093901825.png" alt="image-20230904093901825"></p>
</li>
<li><h3 id="专利软著"><a href="#专利软著" class="headerlink" title="专利软著"></a>专利软著</h3><p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230904094106297.png" alt="image-20230904094106297"></p>
</li>
<li><h3 id="教材或专著"><a href="#教材或专著" class="headerlink" title="教材或专著"></a>教材或专著</h3><p>学生参与编写教材或专著的（须在作者列表中），提交相关材料，由评审委员会认定加分，上限 8 分。</p>
</li>
<li><h3 id="科技获奖"><a href="#科技获奖" class="headerlink" title="科技获奖"></a>科技获奖</h3><ul>
<li>获得国家科技奖励，省部级科技一等奖，可直接定为学业奖学金一等奖</li>
<li>省部级科技二等奖、三等奖在原有奖学金基础上提升一等级</li>
</ul>
</li>
</ul>
</li>
<li><h2 id="素质发展"><a href="#素质发展" class="headerlink" title="素质发展"></a>素质发展</h2><ul>
<li><h3 id="科技竞赛"><a href="#科技竞赛" class="headerlink" title="科技竞赛"></a>科技竞赛</h3><p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230904094921145.png" alt="image-20230904094921145"></p>
<ul>
<li>A类竞赛包括<ul>
<li>中国“互联网+”大学生创新创业大赛</li>
<li>“挑战杯”全国大学生课外学术科技作品竞赛</li>
<li>“挑战杯”中国大学生创业计划大赛</li>
<li><a href="https://cpipc.acge.org.cn/">中国研究生创新实践系列大赛</a><ul>
<li>中国研究生智慧城市技术与创意设计赛</li>
<li>中国研究生未来飞行器创新赛</li>
<li>中国研究生数学建模竞赛</li>
<li>中国研究生电子设计竞赛</li>
<li>中国研究生创“芯”大赛</li>
<li>中国研究生人工智能创新大赛</li>
<li>中国研究生机器人创新设计大赛</li>
<li>中国能源装备创新设计大赛</li>
<li>中国研究生公共管理案例大赛</li>
<li>中国研究生乡村振兴科技强农+创新大赛</li>
<li>中国研究生网络安全创新大赛</li>
<li>中国研究生“双碳”创新与创意大赛</li>
<li>中国研究生金融科技创新大赛</li>
</ul>
</li>
</ul>
</li>
<li>B类竞赛<ul>
<li>纳入研究生院研究生科技创新支持计划的其他竞赛<ul>
<li>全国大学生FPGA 创新设计竞赛</li>
<li>中兴捧月大赛</li>
<li>IEEEXtreme 极限编程大赛</li>
<li>全国大学生集成电路创新创业大赛</li>
<li>全国大学生嵌入式芯片与系统设计大赛</li>
<li>全国大学生集成电路EDA设计精英挑战赛</li>
<li>BOE 创新挑战赛</li>
<li>华为软件精英挑战赛</li>
<li>中国研究生电子设计竞赛商业计划书专项赛</li>
</ul>
</li>
<li>由我国政府教育行政主管部门、专业教学指导委员会，专业学术组织，主办的学术科技类比赛</li>
</ul>
</li>
</ul>
</li>
<li><h3 id="学生骨干"><a href="#学生骨干" class="headerlink" title="学生骨干"></a>学生骨干</h3><p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230904095600951.png" alt="image-20230904095600951"></p>
<ul>
<li>研究生会、研究生党建委员会若本年度获得学校表彰，成员可根据所在组织考评结果增加 1 分</li>
<li>党支部若获得本年度校级以上“先进党支部”称号，根据党支部评议结果，排名前 50%的党支部成员（以党支部正式党员、预备党员人数为基数）增加 1 分，院级减半</li>
</ul>
</li>
<li><h3 id="公益事业"><a href="#公益事业" class="headerlink" title="公益事业"></a>公益事业</h3><ul>
<li>参与志愿者等有突出表现，加 1 分，获得奖励的追加0.5分。可累加，上限为2 分</li>
</ul>
</li>
<li><h3 id="社会实践"><a href="#社会实践" class="headerlink" title="社会实践"></a>社会实践</h3><ul>
<li>参加扶贫、支教、国际组织实习、基层挂职锻炼项目等加 2 分，获得奖励的追加 1 分。可累加，上限 6 分。</li>
</ul>
</li>
<li><h3 id="综合素质比赛"><a href="#综合素质比赛" class="headerlink" title="综合素质比赛"></a>综合素质比赛</h3><ul>
<li>参加由我国政府教育行政主管部门、专业教学指导委员会、专业学术组织和学校学院主办的综合素质类比赛并获奖的，国家级加3分，省市级加 2 分，校级院级加 1 分，上限为 3 分。</li>
</ul>
</li>
</ul>
</li>
<li><h2 id="导师评价"><a href="#导师评价" class="headerlink" title="导师评价"></a>导师评价</h2><ul>
<li><p>评分采取“<strong>科研团队（或导师）总分</strong>+<strong>内部分级</strong>”的方式</p>
</li>
<li><p>每个科研团队（或导师）拥有一个总评分，即该团队（或导师）门下具有参评奖学金资格的<strong>学生人数</strong>×<strong>学生人均分 15 分</strong>＝总评分</p>
</li>
<li><p>评分区间为5—20分，最后学生个人得分的加总不能超过团队（或导师）拥有的总评分。</p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230904100133437.png" alt="image-20230904100133437"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>综合分析：</strong></p>
<p>其实比赛啊，支部啊，意义不大。做真科研，才是真正有长远发展的事情。</p>
]]></content>
      <tags>
        <tag>研究生</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows  环境下利用 Github page 搭建博客环境</title>
    <url>/2023/09/03/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>Github + hexo 搭建个人博客</p>
<span id="more"></span>

<ol>
<li><h2 id="本地环境准备"><a href="#本地环境准备" class="headerlink" title="本地环境准备"></a>本地环境准备</h2><ol>
<li><h3 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h3><blockquote>
<p>目的是为了利用 git 和 Github 仓库进行交互</p>
</blockquote>
<ul>
<li><a href="https://git-scm.com/download/win">下载官方 git</a>，选择合适版本，</li>
<li>将 git 可执行文件路径添加到全局环境变量。</li>
<li>在 PowerShell 中执行 <code>git version</code>,检查是否安装并设置成功。</li>
</ul>
</li>
<li><h3 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h3><blockquote>
<p>目的是使用其包管理软件 npm 安装 hexo ，也可能与 hexo s 命令有关</p>
</blockquote>
<ul>
<li><a href="https://nodejs.org/en/download">下载官方 nodejs</a>，选择合适版本</li>
<li>将 node 可执行文件路径添加到全局环境变量。</li>
<li>在 PowerShell 中执行 <code>node -v</code>,检查是否安装并设置成功</li>
</ul>
</li>
<li><h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><blockquote>
<p>hexo 是一款优秀的博客管理软件？这样定位不知道是否合适</p>
</blockquote>
<ul>
<li>在 git-bash 中使用命令 <code>npm install hexo -g</code> 安装</li>
<li>在 git-bash 中使用命令 <code>hexo -v</code> 验证安装</li>
</ul>
</li>
<li><h3 id="安装-hexo-developer-git"><a href="#安装-hexo-developer-git" class="headerlink" title="安装 hexo-developer-git"></a>安装 hexo-developer-git</h3><blockquote>
<p>这个是 <code>hexo d</code> 命令中将本地编译好的博客部署到 github 仓库时，hexo 和 git 交互的软件</p>
</blockquote>
<ul>
<li>在 git-bash 中使用命令 <code>npm install --save hexo-deployer-git</code> 安装</li>
</ul>
</li>
</ol>
</li>
<li><h2 id="Github-仓库设置"><a href="#Github-仓库设置" class="headerlink" title="Github 仓库设置"></a>Github 仓库设置</h2><ol>
<li><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><blockquote>
<p>默认情况下 github 允许每一个用户建立一个博客仓库</p>
</blockquote>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230903131724407.png" alt="image-20230903131724407"></p>
<p>这里似乎并不能看出这个仓库是专用于搭建博客用的，有待将来研究 Github Pages 的说明。</p>
</li>
</ol>
</li>
<li><h2 id="Git-与-Github-交互设置"><a href="#Git-与-Github-交互设置" class="headerlink" title="Git 与 Github 交互设置"></a>Git 与 Github 交互设置</h2><ol>
<li><h3 id="Git-客户端生成-ssh-公钥"><a href="#Git-客户端生成-ssh-公钥" class="headerlink" title="Git 客户端生成 ssh 公钥"></a>Git 客户端生成 ssh 公钥</h3><ol>
<li><p>在 git-bash 中使用 <code>ssh-keygen -t rsa -C &quot;example@email.com&quot;</code>生成密钥对</p>
</li>
<li><p><code>cd ~/.ssh</code> 进入到 ssh 本地秘钥文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">README.md  config  id_rsa  id_rsa.pub  known_hosts  known_hosts.old</span><br></pre></td></tr></table></figure>
</li>
<li><p>将其中的公钥 <code>id_rsa.pub</code> 的内容复制出来</p>
</li>
</ol>
</li>
<li><h3 id="Github-添加-Git-产生的公钥"><a href="#Github-添加-Git-产生的公钥" class="headerlink" title="Github 添加 Git 产生的公钥"></a>Github 添加 Git 产生的公钥</h3><p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230903134218399.png" alt="image-20230903134218399"></p>
</li>
<li><h3 id="使用-ssh-T-git-github-com-命令测试是否成功"><a href="#使用-ssh-T-git-github-com-命令测试是否成功" class="headerlink" title="使用 ssh -T git@github.com 命令测试是否成功"></a>使用 <code>ssh -T git@github.com</code> 命令测试是否成功</h3></li>
<li><h3 id="设置-Git-用户名和邮箱"><a href="#设置-Git-用户名和邮箱" class="headerlink" title="设置 Git 用户名和邮箱"></a>设置 Git 用户名和邮箱</h3><ul>
<li>设置用户名：<code>git config --global user.name &quot;ColorMao&quot;</code></li>
<li>设置邮箱：<code>git config --global user.email &quot;zhangyumao@petalmail.com&quot;</code></li>
</ul>
</li>
</ol>
</li>
<li><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><ol>
<li><p>在本机合适的位置建立一个存放本地博客文件的文件夹，如我的：<code>E:\Blogs\Focus2flow</code>，git-bash 进入该空文件夹</p>
</li>
<li><p>使用 hexo 本地部署博客</p>
<ol>
<li><code>hexo init</code> 初始化博客文件</li>
<li><code>hexo generate</code> 编译生成可部署的 html 文件</li>
<li><code>hexo server</code> 本地部博客用于预览</li>
</ol>
</li>
<li><p>博客部署到仓库</p>
<ol>
<li><p>在博客文件夹根目录找到 hexo 配置文件 <code>_config.yml</code></p>
</li>
<li><p>更改其中的配置选项为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:captain0X01/captain0X01.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>hexo deploy</code> 部署到 GIthub仓库</p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230903142806727.png" alt="image-20230903142806727"></p>
<p>可以观察到文件确实推上去了，那么远程访问一下博客。</p>
</li>
<li><p>访问博客<a href="https://yimaginer.github.io/">https://yimaginer.github.io/</a></p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230903142952837.png" alt="image-20230903142952837"></p>
<p>访问成功，至此我们在 Github 上搭建了一个幼儿园级的个人博客</p>
</li>
</ol>
</li>
</ol>
</li>
<li><h2 id="新增博文"><a href="#新增博文" class="headerlink" title="新增博文"></a>新增博文</h2><ol>
<li><p>将写好的 markdown 文档放进 site-dir&#x2F;source&#x2F;_posts 文件夹中</p>
</li>
<li><p><code>hexo generate</code> 重新生成</p>
</li>
<li><p><code>hexo deploy</code> 部署，如图</p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230903144752739.png" alt="image-20230903144752739"></p>
</li>
<li><p>这样一个幼儿园博客，就实际使用来看还有下面的差距，如图编号</p>
<ol>
<li>博文是全篇展开放在主页，不科学</li>
<li>这个引用文字的格式转换成了这样，是这个默认主题的原因</li>
<li>新上传的文章没有标题，不行</li>
<li>博客的名称还是默认的，要改</li>
<li>顺便这配色不怎么好看</li>
</ol>
</li>
<li><p>接下里通过换一个主题，并进行设置，打造一个可以实际使用的博客。</p>
</li>
</ol>
</li>
</ol>
<p><strong>参考博客</strong></p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/550709268">利用Github DIY自己的个人博客</a></li>
<li><a href="https://www.cnblogs.com/Alight/p/4354294.html">这是一个有用的思考</a></li>
<li><a href="https://docs.github.com/zh/pages/quickstart">Github pages 官方文档</a></li>
</ul>
<p><strong>补充内容：hexo 命令的具象化解释</strong></p>
<p>执行完<code>hexo init</code></p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230902175759500.png" alt="image-20230902175759500"></p>
<p><code>hexo generate</code></p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230902180712442.png" alt="image-20230902180712442"></p>
<p><code>hexo clean</code>是把生成的东西清掉了</p>
<p><code>hexo d</code></p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230902181617668.png" alt="image-20230902181617668"></p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>房地产研究</title>
    <url>/2023/09/07/%E6%88%BF%E5%9C%B0%E4%BA%A7%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<p>房地产行业研究</p>
<span id="more"></span>

<ol>
<li><h1 id="财政危机与飞税制改革"><a href="#财政危机与飞税制改革" class="headerlink" title="财政危机与飞税制改革"></a>财政危机与飞税制改革</h1><ul>
<li>财政包干使得中央财政吃紧，中央财政对国防，教育，医疗投入面临经费匮乏</li>
<li>分税制把税分成三类<ul>
<li>中央税</li>
<li>地方税</li>
<li>共享税</li>
</ul>
</li>
<li>广东谈判<ul>
<li>分税制可以，但要将土地出让收入归地方</li>
</ul>
</li>
<li>分税制使得中央财政中央财政年均增幅超过了10%，1993年958亿，1994年2906亿，2021年9.15万亿。对经济有了足够的调控能力，开始加速对中国经济体制的改革。</li>
</ul>
</li>
<li><h1 id="“98房改”与三驾马车"><a href="#“98房改”与三驾马车" class="headerlink" title="“98房改”与三驾马车"></a>“98房改”与三驾马车</h1><ul>
<li><p>1997东南亚经济危机蔓延，中央消费，投资，出口三驾马车。</p>
</li>
<li><p>怎么构建，谁来拉动没有办法，1997年，京九铁路剪彩，王石做《分税制对企业的影响》，讨论了房地产行业能不能作为经济支柱。</p>
</li>
<li><p>房地产模式</p>
<ul>
<li>士地财政</li>
<li>商品房预售</li>
<li>信贷体系</li>
<li>钱从购房者手中到开发商，再到地方政府。本质是将居民未来几十年的收入提前预支获得天量资金，转换成财政收入，进行基建，招商引资。将地方政府发展过程中的部分债务转移到居民层面。</li>
</ul>
</li>
<li><p>1994年8月30日到9月2日土地使用制度改革工作会议</p>
<ul>
<li>制约我国发展经济和进行现代化建设的最大制约因素是资金不足</li>
<li>土地是我国经济建设和发展的巨大财富成为共识</li>
</ul>
</li>
<li><p>分税制下地方政府对于财政收入的巨大渴望，政府把主地一级市场的所有权逐渐收回。</p>
<ul>
<li>一开始的方式是无偿划拨和土地出让，但一直无法让土地价值最大化</li>
<li>国土资源部规定经营性土地，即用来建设商业、旅游、娱乐金融、服务业、商品房的土地必须执行“招拍挂”</li>
</ul>
</li>
<li><p>土地市场从无偿划拨到土地出让，与之对应的住房制度是福利分房到商品房，1998年国务院《关于进一步深化城镇住房制度政革，加快住房建设的通知》，即著名的<strong>98房改</strong>。<strong>取消福利分房，实现居民住宅货币化、私有化</strong>，住宅商品化拉开序幕。</p>
</li>
<li><p>购房补贴</p>
<ul>
<li>房价收入比&#x3D;本地一套60平经济适用房的平均价格&#x2F;双职工家庭的年平均工资</li>
<li>中央建设部副部长俞正声拍板，房价收入比大于4倍的要建立购房补贴</li>
<li>要想步履蹒跚的中国房地产引领中国经济走出亚洲经济危机，<strong>还缺两个发动机</strong></li>
</ul>
</li>
<li><p>1999年6月16日，原国家计划发展委员会和教育部联合发出紧急通知决定1999年中国高等教育在年初扩招23万人的基础上再扩大招生33.7万，普通高等院校招生总人数达到153万</p>
<ul>
<li>大学扩招成为拉动经济的基操</li>
<li><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230906212341823.png" alt="image-20230906212341823" style="zoom:67%;" /></li>
<li>人回红利和士地红利开始集中释放，中国经济的三驾马车包经完成其二</li>
</ul>
</li>
<li><p>2001年，中国加入WTO,三家马车最后一架来了，人口红利进一步得到释放</p>
<img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230906212720067.png" alt="image-20230906212720067" style="zoom:67%;" />

<p>评：房地产在那个特定时期发挥了它的经济拉动作用，推动我国的经济实力迅速上升，在房地产刚起步的年代，还是出现了许多在景观、产品细节、建筑风格、设计艺术上追求极致的好楼盘。没有高周转，没有夸张营销。</p>
<blockquote>
<p>美联储降息意味着什么？</p>
</blockquote>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230906213751190.png" alt="image-20230906213751190"></p>
</li>
</ul>
</li>
<li><h1 id="“国十条”与第一次狂奔"><a href="#“国十条”与第一次狂奔" class="headerlink" title="“国十条”与第一次狂奔"></a>“国十条”与第一次狂奔</h1><ul>
<li><p>2004-2008年，房价良性增长，政府稳房价出台一系列政策</p>
<ul>
<li><p>2003明确房地产为支柱产业</p>
</li>
<li><p>2004“831大限”，解决协议出让的历史遗留问题</p>
</li>
<li><p>2005年3月，取消房贷优惠，首套房首付比例从20%上调至30%</p>
</li>
<li><p>2005年3月，老“国八条”，稳房价提高到政治高度</p>
</li>
<li><p>2005.10，二手房需缴纳个人所得税</p>
</li>
<li><p>2006年5月，国六条，7月，《关于规范房地产市场外资准入和管理的意见》</p>
</li>
<li><p>2007年，加大炒房客“资金成本”，5次加息。二套房首付比例不低于50%</p>
</li>
<li><p>2007年，王石在万科会议“海螺行动二”中说，中国楼市的拐点即将到来，随后万科率先降价</p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230906215643008.png" alt="image-20230906215643008"></p>
<p>跟风的房企并不多，但紧接着金融危机到来，消费低靡。房价下调蔓延开来，但是人性都是“买涨不买跌”，越降价越没人买。中国经济有“硬着陆的风险”</p>
</li>
</ul>
</li>
<li><p>2008年11月5日，发布进一步扩大内需，促进经济平稳较快发展的<strong>“国十条</strong>”，具体的方法是：</p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230906220739549.png" alt="image-20230906220739549"></p>
<p>央行5次降息，连续降息2.16%，大水漫灌。</p>
</li>
<li><p>国十条需要的资金从哪里来？是地方政府通过城投公司用<strong>土地</strong>向银行借贷得来的。所以房价不能降，于是各地开始疯狂救市。</p>
</li>
<li><p>2008救市</p>
<ul>
<li><p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230906223413007.png" alt="image-20230906223413007"></p>
</li>
<li><p>同时地方政府可以灵活指定特殊政策</p>
<ul>
<li>杭州“救市”24条，规定购买100万以士房产的客户可直接落户</li>
</ul>
</li>
<li><p>于是全国住宅均价平均上涨25.1%，全国一二线城市房价都在那两年翻了一番</p>
<ul>
<li><p>2008年郑州全年均价3960，到2010年12月已经张到了6493</p>
</li>
<li><p>陆家嘴</p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230906223922564.png" alt="image-20230906223922564"></p>
</li>
</ul>
</li>
<li><p>大量人员开始<strong>恐慌性置业</strong>。</p>
</li>
</ul>
</li>
<li><p>土地金融</p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230906224301852.png" alt="image-20230906224301852"></p>
<ul>
<li>这里面关键是土地价格不能降</li>
</ul>
</li>
<li><p>刹车</p>
<ul>
<li><p>楼市火热，GDP重回两位数，2010年1月10日中快发布了国十一条”，限购</p>
</li>
<li><p>2010年4月12日：新国十条发布，调控加码</p>
<ul>
<li>首套房且90以上，贷款首付款比例不得低于30%</li>
<li>二套房，首付比例不得低于50%，贷款利率率不得低于基准利率的1.1倍，按当时，二套房利率达到了6.53%</li>
<li>非本地居民暂停贷款，就是只能全款</li>
</ul>
</li>
<li><p>2010年10月开始，四次加息，首套房利率来到7.05%</p>
<blockquote>
<p>何为资产负债率，广义货币M2是什么？</p>
<p>美元加息为什么会让资本回流美国？</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>反思：国十条有效拉动了经济复苏，可惜政策没有成熟的监管体系。钱都流向了房市，推高了房价。</p>
</li>
<li><h1 id="第二次狂奔"><a href="#第二次狂奔" class="headerlink" title="第二次狂奔"></a>第二次狂奔</h1><ul>
<li><p>2014加息导致美元资金回流，同时房地产行业供远大于求，导致了房地产低迷</p>
<ul>
<li>呼和浩特等取消<strong>限购</strong>，释放需求，</li>
<li>2014年9月30，央行，银监会下发《关于进一步做好住房金融服务工作的通知》，提出<strong>房贷结清后再购房可算首套</strong>，<strong>限贷</strong>缓和</li>
<li>同时下调贷款利率</li>
<li>相当于从政策端和货币端给房地产松绑。</li>
<li>然而这次的政策松绑并没有起到预期效果<ul>
<li>房价的持续低迷打破了永远涨的预期，不敢投资房产</li>
<li>库存大多是三四线城市，一二线城市扥松绑并不能对整体库存的消化起到明显作用。</li>
</ul>
</li>
</ul>
</li>
<li><p>既然松绑失败，那就只能直接促进需求端的上涨，<strong>棚改货币化</strong></p>
<ul>
<li><p>棚改分为实物安置和货币安置</p>
</li>
<li><p>2014年6月26日，国家开发银行成立住宅金融事业部，针对棚改工作向地方政府发放贷款。</p>
</li>
<li><p>棚改的运作逻辑</p>
<img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230906233801487.png" alt="image-20230906233801487" style="zoom:50%;" />
</li>
<li><p>棚改各阶段分析</p>
<ul>
<li>第一阶段：2007-2012， 大多数居民选择实物安置，因此并没对楼市产生很大影响</li>
<li>第二阶段：2013-2014，住建部选择优先就近实物安置</li>
<li>第三阶段：2015-2018，国务院37号文件，强调提高货币化安置比例，因为要“三去”，货币化安置比例从2014年的9%上升到2016年的48.5%</li>
</ul>
</li>
<li><p>二线拆迁户率先冲入楼市，2016年：合肥、厦门、南京、苏州翻倍涨幅，史称“房价四小龙”</p>
</li>
<li><p>二线楼市上涨促进了三四五线城市拿到接力棒，对楼市发起冲锋。</p>
<ul>
<li>让一直深耕三四线的恒大，碧桂园在2016年完成业绩超车</li>
<li>引起房企下沉</li>
</ul>
</li>
</ul>
</li>
<li><p>2017年<strong>930调控潮</strong>，全国一二线共19个城市发布调控，开始“<strong>五限</strong>”</p>
<ul>
<li>限购</li>
<li>限贷</li>
<li>限售：购房之日起，三年&#x2F;五年&#x2F;十年之内不许上市买卖。直接拉长炒房客资金回收周期</li>
<li>限价：在商品房房价，出地最高拍卖价格两方面设定上限，楼市，土市双限价</li>
<li>限签：房屋备案合同在网上登记备案，叫做“网签”，网签后，这套房的价格信息就会在全国联网的房地产系统中记录在案。国家就可以知道各城市的房价指数，于是各地方政府怕自己房价上涨的太快被中央知道，于是就让高价房源暂缓网签。因此2017年之后的房价指数都是不准确的</li>
<li>结婚离婚如何成为钻制度空子的方法<ul>
<li>以合肥为例<ul>
<li>限购政策为：本市户口住房者至多拥有两套住房，非本市户口购房要满一年社保才能买一套</li>
<li>问题在于本地户口的认定，婚姻持续状态的夫妻按一户只能有两套住房资格，但离了婚就算两户，有四套的购房资格。</li>
<li>合肥楼市新政：离婚不满两年仍按原家庭进行房查</li>
</ul>
</li>
<li>海南<ul>
<li>2017年4月出台：非本省户口只能购买一套，本省户口没限制</li>
<li>于是炒房客与三亚适龄单身女青年假结婚，并将户口迁海南，买够想要的房后离婚。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>一二线调控使得一些区位好的三四线成了炒房客的聚集地。如“环沪四县”，昆山、嘉善、启东、太仓</p>
</li>
<li><p>问题所在：</p>
<ul>
<li>健康发展的房地产可以拉动上下游实体经济发展</li>
<li>房价暴涨造成人心理的异化：你有100万准备投资实体，但是你在的城市一年房价翻翻了，那你怎么还会投资实体经济。</li>
<li>原本带动实体经济发展的房地产反倒成了资金吸血鬼，抢走了原本应该投向实体的资金，扩大了房地产的金融化和泡沫化。</li>
<li><strong>最致命</strong>：房地产市场成了不会下跌的股市，不断推高房价，高的房价就是高的生活成本，让年轻人不得不追求高收入的金融互联网，多少人的梦想从小时候的想当科学家艺术价变成想买一套房。实体产业的发展、科技创新、文化创新都成为了楼市发展的代价。</li>
</ul>
</li>
<li><p>2018年全国各地开始收紧货币化安置，失去了货币化安置购买力的房企开始陷入困局</p>
<ul>
<li>2018年9月，万科郁亮开会强调“活下去”</li>
</ul>
</li>
</ul>
<p>总结：棚改是重要的民生工作，房地产去库存是为了防范金融风险。但这个过程中，房价的泡沫让社会思想开始异化：</p>
<ul>
<li>房企为追求利润和扩张开启高周转，高负债，房子质量也十分堪忧</li>
<li>群众被高房价倒逼为了钱累死累活，有房有车作为婚姻门槛越来越遥不可及</li>
</ul>
</li>
<li><h1 id="高周转的血与泪"><a href="#高周转的血与泪" class="headerlink" title="高周转的血与泪"></a>高周转的血与泪</h1><p>- </p>
<ul>
<li><p>现象</p>
<ul>
<li>2020年315晚会首次曝光万科水帘洞问题，房价越来越高，质量越来越差是人民的实感。</li>
<li>2021年起，高负债房企恒大，融创，碧桂园接连爆雷</li>
</ul>
</li>
<li><p>勾地</p>
<ul>
<li><p>早期无偿划拨和协议出让，2002建立土地“招拍挂”制度以后拿地成本很不确定</p>
</li>
<li><p>勾地就是类似于万达，龙湖模式，住宅+商业中心，通常会和政府暗通款曲，量身打造招标条件，同时地价也会比纯住宅低</p>
</li>
<li><p>保证金制度</p>
<ul>
<li>如果想拿地，必须先缴纳一定数额保证金才拥有了报名资格。</li>
<li>拍到了，保证金转成土地款；没拍到，原路退回。</li>
</ul>
</li>
</ul>
</li>
<li><p>工程经济学中的现金流模型</p>
<ul>
<li><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230912142256305.png" alt="image-20230912142256305"></li>
<li>当土地成本、借款利率、税费建安费都无法下降的时候，将目光转向了时间——<strong>高周转</strong><ul>
<li>拿地后尽快开工，尽快开盘，尽快回款</li>
<li>两件事上放慢<ul>
<li>推迟土地款的支付时间</li>
<li>延期支付施工单位的工程款，延期到开盘之后甚至现金流回正之后，减少了前期融资的需求，降低了资金成本</li>
</ul>
</li>
<li><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230912143558648.png" alt="0"></li>
</ul>
</li>
</ul>
</li>
<li><p>现实中高周转如何落地呢？</p>
<ul>
<li>首先是开盘时间的提速，开盘时间越早，曲线上扬越早，偿还贷款，节省资金成本。 </li>
<li>销售速度，销售速度越快，现金流上升的斜率就越陡，</li>
<li>建设速度，这是前两者的必要条件</li>
<li>释放预售监管资金进入公司自有账户</li>
<li>在项目外建立庞大的资金池，和自有资金一起进行投资</li>
</ul>
<blockquote>
<p>容积率：建筑总面积&#x2F;净用地面积</p>
<p>货地比：房产销售额&#x2F;总土地款</p>
<p>预售条件：从拿地到销售，需要满足预售条件，不同地区预售条件不一样</p>
<p>预售资金管理：</p>
</blockquote>
<ul>
<li>万科高周转<ul>
<li>2004年，36岁郁亮（北大经济系）接棒王石，提出“10年时间万科业务翻10倍，销售冲击千亿”</li>
<li>“5986”模式<ul>
<li>拿地后5个月开工，9个月开盘</li>
<li>普通住宅占开盘房源8成，开盘后当月销量达6成</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>高周转恶性循环</p>
<ul>
<li>规模越大的房企越容易获得额度更大，利息更低的贷款；小规模获得贷款利息更高，甚至申请不下来。</li>
<li>越大的规模意味着更便宜的融资，以为着更低的资金成本，也以为着更能发展更大规模和利润。</li>
<li>房地产沦为了资金游戏，顺便盖个房子</li>
</ul>
</li>
<li><p>美元债</p>
<ul>
<li><p>2016年19城调控前，房企通过上市、信托等渠道筹集资金</p>
</li>
<li><p>2016-2017调控潮之后，房企在国内的融资收紧，于是开始转向美元债</p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230912153414464.png" alt="image-20230912153414464"></p>
</li>
<li><p>美元债与信用评级挂钩，于是房企在美元债“躺平”就是房企爆雷的标志。</p>
</li>
</ul>
</li>
<li><p>净资产收益率ROE</p>
<ul>
<li><p>调控措施让房企的利润下降，使得ROE这个指标对于房企来说更重要，</p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230912163753937.png" alt="image-20230912163753937"></p>
</li>
<li><p>从重视净利率到重视ROE反映的是行业玩法的改变，就是将自己手上的每一分钱的赚钱能力发挥到极致。因为做个约分就发现：ROE &#x3D; 净利润&#x2F;总权益资本</p>
</li>
<li><p>导致的结果就是，<strong>加杠杆</strong>，于是奇怪现象：</p>
<ul>
<li><p>想做房企的施工单位，可以，请给一个亿的无息借款</p>
</li>
<li><p>并且我给你的工程支付会一直延后，让我的现金流尽快回正。</p>
<blockquote>
<p>我不成跪着要饭的了？要真这么说，给高周转房企当总包还真就是跪着要饭的，就这，多少人想跪还没这门子呢！</p>
</blockquote>
</li>
<li><p>向员工融资：跟投项目+理财产品</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>高负债率</p>
<ul>
<li>在高周转模式下，只要现金流不断，这个模式就可以一直玩下去。</li>
<li>房企高负债逐渐成为中国经济的恶性肿瘤</li>
<li>2017年，十九大报告提出的“三大攻坚战”之首就是防范化解重大风险</li>
<li>2018年开始中央出台一系列政策加大房企融资限制，准备对房企釜底抽薪。</li>
<li>2019年底，2020年初新冠黑天鹅，使得不得不量化宽松扶持微小企业发展，这些钱却被用来炒房，引发<strong>第三次狂奔</strong></li>
</ul>
</li>
</ul>
</li>
<li><h1 id="第三次狂奔与三道红线"><a href="#第三次狂奔与三道红线" class="headerlink" title="第三次狂奔与三道红线"></a>第三次狂奔与三道红线</h1><ul>
<li><p>经营贷炒房</p>
</li>
<li><p>三道红线</p>
<ul>
<li><strong>剔除预收账款的资金负债率</strong>不得大于70%</li>
<li><strong>净负债率</strong>不得大于100%</li>
<li><strong>现金短债比</strong>不得小于1倍</li>
</ul>
</li>
<li><p>剔除预收账款的资产负债率</p>
<ul>
<li>预收款&#x3D;首付+房贷回款</li>
<li>交房前预收款被算作负债，交房后倍算作收入</li>
<li>剔除预收账款的资产负债率&#x3D;（总负债-预收款）&#x2F;（总资产-预收款）</li>
</ul>
</li>
<li><p>净负债</p>
<ul>
<li>净负债 &#x3D; （有息负债-货币资金）&#x2F; 合并权益</li>
</ul>
</li>
<li><p>现金短债</p>
<ul>
<li>现金短债比 &#x3D; 货币资金 &#x2F; 短期有息负债</li>
</ul>
</li>
<li><p><strong>三道红线</strong>和<strong>限跌令</strong>下的房企</p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230912203923915.png" alt="image-20230912203923915"></p>
</li>
</ul>
</li>
<li><h1 id="备用"><a href="#备用" class="headerlink" title="备用"></a>备用</h1><ul>
<li></li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>房地产</tag>
        <tag>经济</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心</title>
    <url>/2024/09/01/%E8%B4%AA%E5%BF%83/</url>
    <content><![CDATA[<p>acwing 贪心算法</p>
<span id="more"></span>

<ul>
<li><p>区间问题基础语法问题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如何存储区间</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;<span class="type">int</span> l,r; <span class="type">bool</span> <span class="keyword">operator</span>&lt;()&#123;&#125;&#125;range[N]	<span class="comment">// 结构体数组</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;   vector&lt;PII&gt; <span class="comment">// vector 存 PII</span></span><br><span class="line"><span class="comment">// 如何排序</span></span><br><span class="line"><span class="keyword">operator</span>&lt;	<span class="comment">// 操作符重载</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">()</span>	<span class="comment">// 定义比较器</span></span></span><br><span class="line"><span class="function"><span class="title">sort</span><span class="params">(a.begin(), a.begin() + n, [](vector&lt;<span class="type">int</span>&gt; &amp;a, vector&lt;<span class="type">int</span>&gt; &amp;b)&#123;<span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];&#125;)</span></span>; <span class="comment">// lambda 函数</span></span><br><span class="line"><span class="comment">// 如何输入一个区间</span></span><br><span class="line">range[i] = &#123;l,r&#125;; </span><br><span class="line">cin &gt;&gt; range[i].l &gt;&gt; range[i].r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;range[i].l, &amp;range[i].r);</span><br><span class="line">vc.<span class="built_in">push_back</span>(&#123;l,r&#125;);	<span class="comment">// pair 也算聚合体 可以用花括号作临时 pair 对象</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>sort 函数默认对 vector<PII> 进行双关键字排序</p>
</blockquote>
</li>
<li><p>区间选点: 选择尽量少的点，使得每个区间内至少包含一个选出的点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Range &amp;W)<span class="type">const</span> &#123; <span class="keyword">return</span> r &lt; W.r; &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;range[i].l, &amp;range[i].r);</span><br><span class="line">    <span class="built_in">sort</span>(range, range + n);</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, ed = <span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (ed &lt; range[i].l)</span><br><span class="line">        &#123; res ++ ;ed = range[i].r; &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>思路总结：</p>
<ol>
<li>按右端点排序</li>
<li>依次遍历区间，<ol>
<li>和当前 end 有交集，则跳过</li>
<li>无交集，更新 end</li>
</ol>
</li>
</ol>
<p>为什么按右端点排序？</p>
<p>因为要尽可能少的点，点从左往右选，希望步子尽可能大，但是前提是点穿过所有区间，所以步子限制在无交集区间中最靠左的右端点</p>
<p>为何和最大无交集区间数是一个问题？</p>
<p>最大不相交区间和最多会议安排，都是找尽早结束时间点的区间纳入选择集中，这和区间选点策略是一样的。</p>
</blockquote>
</li>
<li><p>区间分组: 将区间分成若干组，使得每组内部的区间两两之间（包括端点）没有交集，并使得组数尽可能小。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Range &amp;W)<span class="type">const</span> &#123; <span class="keyword">return</span> l &lt; W.l; &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        range[i] = &#123;l, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(range, range + n);</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; heap;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (heap.<span class="built_in">empty</span>() || heap.<span class="built_in">top</span>() &gt;= range[i].l)</span><br><span class="line">            heap.<span class="built_in">push</span>(range[i].r);</span><br><span class="line">        <span class="keyword">else</span> &#123; heap.<span class="built_in">pop</span>(); heap.<span class="built_in">push</span>(range[i].r); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, heap.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>思路总结：</p>
<ol>
<li>按左端点排序</li>
<li>遍历区间<ol>
<li>当前区间可以放在某组，放入并更新结束时间</li>
<li>无法放入，开新组</li>
</ol>
</li>
</ol>
<p>为什么这里又变成了左端点排序？</p>
<ol>
<li>其实是按开始时间依次放入，倘若变成按结束时间依次放入</li>
</ol>
<p>另一种新奇的思路：<a href="https://www.acwing.com/solution/content/8902/">https://www.acwing.com/solution/content/8902/</a></p>
</blockquote>
</li>
<li><p>区间覆盖</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Range &amp;W)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> l&lt;W.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> st,ed;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;st,&amp;ed);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">        range[i]=&#123;l,r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(range,range+n);</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = i, r = <span class="number">-2e9</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; n &amp;&amp; range[j].l &lt;= st)</span><br><span class="line">        &#123; r = <span class="built_in">max</span>(r, range[j].r); j ++; &#125;</span><br><span class="line">        <span class="keyword">if</span>(r &lt; st)&#123; cout &lt;&lt; <span class="number">-1</span>; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">        res ++;</span><br><span class="line">        <span class="keyword">if</span>(r &gt;= ed)&#123; cout &lt;&lt; res; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">        st = r; i = j - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     cout &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>思路总结：</p>
<ol>
<li>区间按左端点排序</li>
<li>遍历区间<ol>
<li>从可以覆盖 st 的区间中找一个右端点最靠右的，最大化覆盖 st ed 区间</li>
<li>更新 st 为这个区间最靠右的值。回到 2-1 循环</li>
</ol>
</li>
</ol>
</blockquote>
</li>
</ul>
<p>区间问题总结：</p>
<ul>
<li><p>区间尽管可以将其看做元素，根据需要按左端点或右端点进行排序</p>
</li>
<li><p>哈夫曼树</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span>(n ==  <span class="number">1</span>) &#123;cout &lt;&lt; <span class="number">0</span>; <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123; <span class="type">int</span> t; cin &gt;&gt; t; q.<span class="built_in">push</span>(t); &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>() &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> s1 = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> s2 = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        res += s1 + s2;</span><br><span class="line">        q.<span class="built_in">push</span>(s1 + s2);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>排队打水</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="built_in">sort</span>(m,m + n);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> wait = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123; res += wait; wait += m[i]; &#125;</span><br><span class="line"><span class="comment">// 方法2 太优美了！</span></span><br><span class="line"><span class="built_in">sort</span>(t, t + n);</span><br><span class="line"><span class="built_in">reverse</span>(t, t + n);</span><br><span class="line">LL res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) res += t[i] * i;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>AFL调试准备</title>
    <url>/2023/09/06/AFL%E8%B0%83%E8%AF%95%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<span id="more"></span>

<ul>
<li><p>在vscode+mingw64的条件下试图调试AFL,发现缺少头文件</p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230906163736865.png" alt="image-20230906163736865"></p>
<p>考虑安装VS再尝试</p>
</li>
<li><p>安装vs之后仍然报头文件缺失，然后全局搜索 shm.h 文件，发现本机并没有这个文件。此时恍然大悟，AFL 可能本来就不能再win上运行，<a href="https://www.51cto.com/article/753518.html">查证</a>后果然，为此还有人开发了 win 上的 AFL 工具<a href="https://github.com/ivanfratric/winafl">WinAFL</a>。</p>
<p><img src="https://picgo-buk.oss-cn-chengdu.aliyuncs.com/img/image-20230906171407166.png" alt="image-20230906171407166"></p>
</li>
<li><p>那么现在的方案有两个</p>
<ul>
<li>在 mac 上调试</li>
<li>在 linux 上直接 gdb 调试。或者 gdb + vscode 可视化调试</li>
</ul>
</li>
</ul>
<p>首先尝试第二种方案：</p>
<ul>
<li><p>读懂 Makefile 文件，给出 -g 编译选项，方便调试。</p>
</li>
<li><p>研究之后发现本来的 Makefile 中编译选项已经包含了 -g 所以都可以直接调试。</p>
</li>
<li><p>下一步思考怎么搭建一个双机调试环境？</p>
</li>
<li><p>退一步学习一下怎么样使用gdb调试。</p>
</li>
<li><p>先进行一个小的实验：<a href="https://xz.aliyun.com/t/4314">初探AFL-Fuzz</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插桩编译</span></span><br><span class="line">afl-gcc -g -o test test.c</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">模糊测试</span></span><br><span class="line">afl-fuzz -i input_dir -o output_dir program</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始使用GDB调试AFL</p>
<ul>
<li><a href="https://www.cnblogs.com/suphgcm/p/15498577.html">GDB cheetsheet</a></li>
<li><a href="https://wenku.baidu.com/view/30c4cfbfcf22bcd126fff705cc17552707225e0f.html?_wkts_=1694057567582&bdQuery=gdb+cheetsheet">cheet sheet</a></li>
<li><a href="https://blog.csdn.net/wxh0000mm/article/details/108582238">gdb速查表</a></li>
<li><a href="https://github.com/yimaginer/awesome-cheatsheets/blob/master/tools/gdb.txt">awesome-cheetsheet</a></li>
</ul>
</li>
</ul>
<p>记录调试过程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动调试</span></span><br><span class="line">gdb --args afl-fuzz -i fuzz_in -o fuzz_out ./afl_test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GDB 前端</span></span><br><span class="line">ctrl-x ctrl-a 更换 CLI/TUI</span><br></pre></td></tr></table></figure>

<p>遇到的问题：<br><a href="http://www.taodudu.cc/news/show-5082273.html?action=onClick">GDB调试显示＜ optimized_out ＞</a></p>
]]></content>
      <tags>
        <tag>Fuzz</tag>
        <tag>AFL</tag>
      </tags>
  </entry>
  <entry>
    <title>docker环境</title>
    <url>/2023/09/07/docker%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>docker环境</p>
<span id="more"></span>

<ol>
<li>在linux环境安装docker：<a href="https://docs.docker.com/desktop/install/linux-install/">https://docs.docker.com/desktop/install/linux-install/</a></li>
<li>docker权限问题：<a href="https://blog.csdn.net/AS_TS/article/details/131184815">https://blog.csdn.net/AS_TS/article/details/131184815</a></li>
</ol>
<h2 id="exercise1"><a href="#exercise1" class="headerlink" title="exercise1"></a>exercise1</h2><p>在docker环境中作一份代码的fuzzing</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本机下载问题代码</span></span><br><span class="line">git clone https://github.com/alex-maleno/Fuzzing-Module.git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行 AFL++ 的 docker 容器</span></span><br><span class="line">docker run --rm -it -v /home/tiger/fuzz/Fuzzing-Module://home/Fuzzing-Module 6612ffca640e</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cmake 编译示例代码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成seeds</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始fuzzing</span></span><br><span class="line">/AFLplusplus/afl-fuzz -i /home/Fuzzing-Module/exercise1/seeds -o out -m none -d -- /home/Fuzzing-Module/exercise1/build/simple_crash</span><br><span class="line"></span><br><span class="line">docker run --rm -it -v &quot;/home/tiger&quot;:&quot;/home/tiger&quot; 6612ffca640e</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
</search>
